{
  "files": [
    {
      "path": "projects/ev-charger-locator.py",
      "content": "import json\nimport math\nimport sys\n\n# Predefined database of EV charging stations in South Africa.\n# Each station contains 'name', 'latitude', and 'longitude' keys.\nCHARGING_STATIONS = [\n    {\"name\": \"Station A\", \"latitude\": -26.2041, \"longitude\": 28.0473},\n    {\"name\": \"Station B\", \"latitude\": -25.7479, \"longitude\": 28.2293},\n    {\"name\": \"Station C\", \"latitude\": -33.9249, \"longitude\": 18.4241},\n    {\"name\": \"Station D\", \"latitude\": -29.8587, \"longitude\": 31.0218},\n    {\"name\": \"Station E\", \"latitude\": -28.4793, \"longitude\": 24.6727}\n]\n\ndef haversine(lat1, lon1, lat2, lon2):\n    \"\"\"Calculate the great-circle distance between two latitude-longitude points.\"\"\"\n    R = 6371  # Radius of the Earth in kilometers\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    return R * 2 * math.asin(math.sqrt(a))\n\ndef find_nearest_charging_stations(latitude, longitude, max_results=3):\n    \"\"\"Find the nearest EV charging stations to the provided location.\"\"\"\n    distances = []\n    for station in CHARGING_STATIONS:\n        distance = haversine(latitude, longitude, station['latitude'], station['longitude'])\n        distances.append((station, distance))\n    distances.sort(key=lambda x: x[1])  # Sort by distance\n    return distances[:max_results]\n\ndef main():\n    \"\"\"Main program to locate nearby EV charging stations.\"\"\"\n    if len(sys.argv) != 3:\n        print(\"Usage: python ev-charger-locator.py <latitude> <longitude>\")\n        sys.exit(1)\n\n    try:\n        latitude = float(sys.argv[1])\n        longitude = float(sys.argv[2])\n    except ValueError:\n        print(\"Error: Latitude and longitude must be valid numbers.\")\n        sys.exit(1)\n\n    nearest_stations = find_nearest_charging_stations(latitude, longitude)\n    print(\"Nearest EV Charging Stations:\")\n    for station, distance in nearest_stations:\n        print(f\"{station['name']} - {distance:.2f} km away\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "path": "projects/README.md",
      "content": "# EV Charger Locator\n\n## Overview\nThe EV Charger Locator helps users in South Africa find nearby EV charging stations based on their current latitude and longitude. It also calculates the approximate distance to the closest stations using the haversine formula.\n\n## Usage\nRun the program from the command line, providing your latitude and longitude as arguments. The program will display the three nearest charging stations along with their respective distances.\n\n## Quick-Start\n```bash\n# Navigate to the projects folder\ncd projects\n\n# Run the program\npython ev-charger-locator.py <latitude> <longitude>\n\n# Example\npython ev-charger-locator.py -26.2041 28.0473\n```\n\nReplace `<latitude>` and `<longitude>` with valid geographical coordinates."
    }
  ],
  "commit": "Add EV Charger Locator app with station search functionality and README."
}